package test_jwt

import (
	"fmt"
	jwt "github.com/dgrijalva/jwt-go"
	"io/ioutil"
	"log"
	_ "os"
	"time"
)

const (
	privateKeyPath = "keys/id_rsa"
	publicKeyPath  = "keys/id_rsa.pub"
)

var Verifykey, Signinkey *[]byte

func init() {
	var err error

	Signinkey, err = ioutil.ReadFile(privateKeyPath)
	if err != nil {
		log.Fatal("Error reading private key")
	}
	fmt.Println(Signinkey)

	Verifykey, err = ioutil.ReadFile(publicKeyPath)

	if err != nil {
		log.Fatal("Error reading public key")

	}

	fmt.Println(Verifykey)
	return 1

}

type Keys struct {
	public, private []byte
}

func (k Keys) encode(user_name) {

	// Create a new token object, specifying signing method and the claims
	// you would like it to contain.
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
		"foo": user_name,
		"nbf": time.Date(2015, 10, 10, 12, 0, 0, 0, time.UTC).Unix(),
	})

	//hmacSampleSecret = "bondu"
	b := []byte{'g', 'o', 'l', 'a', 'n', 'g'}
	fmt.Println(b)
	// Sign and get the complete encoded token as a string using
	tokenString, err := token.SignedString(b)

	fmt.Println(tokenString, err)
}
